## switch env
cerp () {
	if [[ -z "$1" ]]
	then
    echo $_CERTIFY_PROFILE
		return
	fi

  _setCertifyProfile $1
}

function _setCertifyProfile() {
  local certify_profile
  case $1 in
    d) certify_profile="development" 
       . ~/dotfiles/certify.develop.env
       asp cd #switch to aws cd profile using the zsh aws plugin
       ;;
    s) certify_profile="staging"
       . ~/dotfiles/certify.staging.env
       asp cd
       ;;
    p) certify_profile="production"
       . ~/dotfiles/certify.production.env
       asp cp #switch to aws cp profile using the zsh aws plugin
       ;;
  esac

  export _CERTIFY_PROFILE=$certify_profile
}

#get user details
function cget() {
  # aws cognito-idp admin-get-user --user-pool-id ap-southeast-1_Q5BSv9IX7 --username "SG$1" | jq '.UserAttributes[] | select(.Name | endswith("email") or endswith("phone_number") or endswith("employee_id") or endswith("staff_type"))'
  aws cognito-idp admin-get-user --user-pool-id $_CERTIFY_POOL_ID --username "SG$1" | jq '(.UserAttributes | map( {(.Name) : .Value}) | add ) as $fields | {Username,employee_id: $fields."custom:employee_id",employment_status: $fields."custom:employment_status",UserStatus,phone_number_verified: $fields.phone_number_verified, phone_number: $fields.phone_number, email_verified: $fields.email_verified, email: $fields.email,company_email: $fields."custom:company_email", personal_email: $fields."custom:personal_email",UserLastModifiedDate}'
  _cgetLastLoginStatus $1
}

#deleteuser details
function cdel() {
  aws cognito-idp admin-delete-user --user-pool-id $_CERTIFY_POOL_ID --username "SG$1"
}


#get user details raw
function cgetr() {
  aws cognito-idp admin-get-user --user-pool-id $_CERTIFY_POOL_ID --username "SG$1"
}


#get the user values without the column headers
function cgetcsvrow() {
  # aws cognito-idp admin-get-user --user-pool-id ap-southeast-1_Q5BSv9IX7 --username "SG$1" | jq '.UserAttributes[] | select(.Name | endswith("email") or endswith("phone_number") or endswith("employee_id") or endswith("staff_type"))'
  aws cognito-idp admin-get-user --user-pool-id $_CERTIFY_POOL_ID --username "SG$1" | jq --raw-output '(.UserAttributes | map( {(.Name) : .Value}) | add ) as $fields | [{Username,employee_id: $fields."custom:employee_id",employment_status: $fields."custom:employment_status",UserStatus,phone_number_verified: $fields.phone_number_verified, phone_number: $fields.phone_number, email_verified: $fields.email_verified, email: $fields.email,company_email: $fields."custom:company_email", personal_email: $fields."custom:personal_email",UserLastModifiedDate}] | (.[0] | keys_unsorted) as $keys | map([.[ $keys[] ]])[] | @csv'
}

function cgetcsv() {
  if (( $# == 0 ));
  then echo "no args passed!"
  else
    echo '"Username","employee_id","employment_status","UserStatus","phone_number_verified","phone_number","email_verified","email","company_email","personal_email","UserLastModified"'
    for i
      # if (( i == 1)); then
      #   echo 1
      # fi
      do cgetcsvrow $i
    done
  fi
}

function _cgetLastLoginStatus() {
  aws cognito-idp admin-list-user-auth-events --user-pool-id $_CERTIFY_POOL_ID --username SG$1 | jq '.AuthEvents[0] | {EventResponse,EventType,CreationDate,EventRisk,ChallengeResponses}'
}

#get last 5 login attempt statuses
function cgets() {
  aws cognito-idp admin-list-user-auth-events --user-pool-id $_CERTIFY_POOL_ID --username SG$1 | jq '.AuthEvents[0:6][] | {EventResponse,EventType,CreationDate,EventRisk,ChallengeResponses}'
}
