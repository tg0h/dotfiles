# TODO: awslogs get  sns/ap-southeast-1/474132418168/DirectPublishToPhoneNumber -s '9/1/2020 00:00' -e '9/1/2020 02:00' > certify_sms_publish

## switch env
cerp () {
  if [[ -z "$1" ]]
  then
    echo $_CERTIFY_PROFILE
    return
  fi

  _setCertifyProfile $1
}

function _setCertifyProfile() {
  local certify_profile
  case $1 in
    d) certify_profile="development"
      . ~/dotfiles/certify.develop.env
      asp cd #switch to aws cd profile using the zsh aws plugin
      ;;
    s) certify_profile="staging"
      . ~/dotfiles/certify.staging.env
      asp cd
      ;;
    p) certify_profile="production"
      . ~/dotfiles/certify.production.env
      asp cp #switch to aws cp profile using the zsh aws plugin
      ;;
  esac

  export _CERTIFY_PROFILE=$certify_profile
}

#get user details
function cget() {
  # aws cognito-idp admin-get-user --user-pool-id ap-southeast-1_Q5BSv9IX7 --username "SG$1" | jq '.UserAttributes[] | select(.Name | endswith("email") or endswith("phone_number") or endswith("employee_id") or endswith("staff_type"))'
  aws cognito-idp admin-get-user --user-pool-id $_CERTIFY_POOL_ID --username "SG$1" | jq '(.UserAttributes | map( {(.Name) : .Value}) | add ) as $fields | {Username,employee_id: $fields."custom:employee_id",name: $fields.name,given_name: $fields.given_name,family_name: $fields.family_name,"employment_status>>>>>>>>>>>>>>>>>>>>": $fields."custom:employment_status",join_date: $fields."custom:join_date",UserStatus,phone_number_verified: $fields.phone_number_verified,"phone_number>>>>>>>>>>>>>>>>>>>>": $fields.phone_number, email_verified: $fields.email_verified, "email>>>>>>>>>>>>>>>>>>>>": $fields.email,company_email: $fields."custom:company_email", personal_email: $fields."custom:personal_email",UserCreateDate,UserLastModifiedDate}'
  _cgetLastLoginStatus $1
  rg "(SG$1).*(NUM|EMAIL|STAT)" ~/certis/projects/certify/s3 --sortr created
}

crgs () {
  rg SG$1 --sortr created ~/certis/projects/certify/s3
}

function cpatch(){
  local empIds
  if (( $# == 0 )); then
    # empIds=( $(</dev/stdin) )
    empIds=$(tee) #get from stdin into x
    # echo $empIds
  else
    empIds=$@
    echo $empIds
  fi

  while getopts 'r' opt; do
    case "$opt" in
      r) local r=true ;;
    esac
  done
  shift $(($OPTIND - 1))

  {
    if ! [[ -v r ]]; then # if not raw, show column headers
      echo "EE ID","Global ID","Start Date","End Date","FieldName","Field Value","Status"
    fi
    # for i #without in ... this reads the positional params
    # echo $empIds
    for empId in ($empIds)
    do rg -I "(SG$empId).*(NUM|EMAIL|STAT)" ~/certis/projects/certify/s3 --sortr created
    done
  } | tee /tmp/certifypatch.csv
# rg -I "(SG$1).*(NUM|EMAIL|STAT)" ~/certis/projects/certify/s3 --sortr created } | tee /tmp/certifypatch.csv
}

#deleteuser details
function ccreate() {
  local handphone="+***REMOVED***" #default
  local email="***REMOVED***" #default

  while getopts 'e:p:' opt; do
    case "$opt" in
      e) email=$OPTARG ;;
      p) handphone=$OPTARG ;;
    esac
  done
  shift $(($OPTIND - 1))

  aws cognito-idp admin-create-user \
    --user-pool-id $_CERTIFY_POOL_ID \
    --username SG$1 \
    --temporary-password ***REMOVED*** \
    --message-action SUPPRESS \
    --user-attributes \
    Name=custom:employee_id,Value="$1" \
    Name=given_name,Value="Timtesty" \
    Name=family_name,Value="Goh" \
    Name=email,Value="$email" \
    Name=phone_number,Value="$handphone" \
    Name=custom:company,Value="1000" \
    Name=custom:organization,Value="50794952" \
    Name=custom:department,Value="Tech Planning & Development" \
    Name=custom:staff_type,Value="O0001" \
    Name=custom:employment_status,Value="3" \
    Name=custom:working_home,Value="C100" \
    Name=custom:personal_email,Value="timothySL_goh@certisgroup.COM" \
    Name=custom:legal_home,Value="C400" \
    Name=custom:join_date,Value="20191111"\
  }


#deleteuser details
function cdel() {
  aws cognito-idp admin-delete-user --user-pool-id $_CERTIFY_POOL_ID --username "SG$1"
}


#get user details raw
function cgetr() {
  aws cognito-idp admin-get-user --user-pool-id $_CERTIFY_POOL_ID --username "SG$1"
}


#get the user values without the column headers
function cgetcsvrow() {
  # aws cognito-idp admin-get-user --user-pool-id ap-southeast-1_Q5BSv9IX7 --username "SG$1" | jq '.UserAttributes[] | select(.Name | endswith("email") or endswith("phone_number") or endswith("employee_id") or endswith("staff_type"))'
  aws cognito-idp admin-get-user --user-pool-id $_CERTIFY_POOL_ID --username "SG$1" | jq --raw-output '(.UserAttributes | map( {(.Name) : .Value}) | add ) as $fields | [{Username,employee_id: $fields."custom:employee_id",name: $fields.name,given_name: $fields.given_name,family_name: $fields.family_name,employment_status: $fields."custom:employment_status",join_date: $fields."custom:join_date",UserStatus,phone_number_verified: $fields.phone_number_verified, phone_number: $fields.phone_number, email_verified: $fields.email_verified, email: $fields.email,company_email: $fields."custom:company_email", personal_email: $fields."custom:personal_email",UserCreateDate,UserLastModifiedDate}] | (.[0] | keys_unsorted) as $keys | map([.[ $keys[] ]])[] | @csv'
}

function cgetcsv() {
  if (( $# == 0 ));
  then echo "no args passed!"
  else
    echo '"Username","employee_id","name","given_name","family_name","employment_status","join_date","UserStatus","phone_number_verified","phone_number","email_verified","email","company_email","personal_email","UserCreateDate","UserLastModified"'
    for i #without in ... this reads the positional params
    do cgetcsvrow $i
    done
  fi
}

function cgetscsv() {
  # TODO: run this in parallel with a named pipe?
  if (( $# == 0 ));
  then echo "no args passed!"
  else
    echo '"Username","EventResponse","EventType","CreationDate","RiskDecision","CompromisedCredentialsCreated","ChallengeName","ChallengeResponse"'
    for i #without in ... this reads the positional params
    do cgetscsvrow $i
    done
  fi
}

#get the user values without the column headers
function cgetscsvrow() {
  aws cognito-idp admin-list-user-auth-events --user-pool-id $_CERTIFY_POOL_ID --username SG$1 | jq --raw-output ".AuthEvents[0] | [$1,.EventResponse,.EventType,.CreationDate,.EventRisk.RiskDecision,.EventRisk.CompromisedCredentialsDetected,.ChallengeResponses[0].ChallengeName,.ChallengeResponses[0].ChallengeResponse] | @csv"
}





function _cgetLastLoginStatus() {
  aws cognito-idp admin-list-user-auth-events --user-pool-id $_CERTIFY_POOL_ID --username SG$1 | jq '.AuthEvents[0] | {EventResponse,EventType,CreationDate,EventRisk,ChallengeResponses}'
}

#get last 5 login attempt statuses
function cgets() {

  local n=6 #default to get 5 items
  while getopts 'n:' opt; do
    case "$opt" in
      n) n=$OPTARG ;;
    esac
  done
  shift $(($OPTIND - 1))

  # aws cognito-idp admin-list-user-auth-events --user-pool-id $_CERTIFY_POOL_ID --username SG$1 | jq '.AuthEvents[0:6][] | {EventResponse,EventType,CreationDate,EventRisk,ChallengeResponses}'
  aws cognito-idp admin-list-user-auth-events --user-pool-id $_CERTIFY_POOL_ID --username SG$1 | jq ".AuthEvents[0:$n][] | {EventResponse,EventType,CreationDate,EventRisk,ChallengeResponses}"
}

## cognito pool operations
csync() {
  #sync source to destination (one way)
  #source is the users uploads dir
  #include only works if you exclude everything first
  #include and excludes filter is relative to source folder
  #eg if your s3 is s3//bucket/folder/tim and your source is s3//bucket/folder
  #and you want to exclude tim, specify /tim not s3//bucket/folder/tim
  aws s3 sync $_CERTIFY_S3_BUCKET_SAP_SYNC $_CERTIFY_S3_BUCKET_SAP_SYNC_LOCAL_FOLDER \
    --exclude "*" --include "*.csv" --include "*.CSV" --exclude "hk/*"
  }
