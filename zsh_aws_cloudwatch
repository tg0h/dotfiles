# NOTE: zsh parameter expansion only happens within single quotes "$HOME" expands, '$HOME' gives literal value
# ALL
# filter pattern requires '"<filter>"' ... strange

function cwargus-ms-session-dev() {
  awslogs get /aws/ecs/argus-ms-session-dev ALL --filter-pattern='"'$1'"' --since "$2" --no-group --no-stream
}

function cwargus-ms-userdev() {
  awslogs get /aws/ecs/argus-ms-user-dev ALL --filter-pattern='"'$1'"' --start "$2" --no-group --no-stream
}

# convert epoch time in ms to date
function ctime() {
  ms=${1: -3} #get last 3 digits (milliseconds)
  y=${1%???} #another way to remove last 3 chars
  ts=${1:0:-3} #remove last 3 chars to get epoch ts without ms

  strftime "%a %b %e %H:%M:%S.$ms %Y" $ts
}

#provide adjustment and return time in epoch ms
function datev(){
print $(($(date -v -$1 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
}

function ddaUserActivities() {
local userId=$(_dbGetUserId $1)
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
#use homebrew aws js sdk node module cli to get dynamodb response as normal json instead of as a dynamodb attribute value map
ddget --tableName="Argus-UserActivities-$_ARGUS_DD_SUFFIX" \
    --keyConditionExpression="userId = :userId and ts > :ts" \
    --expressionAttributeValues='{":userId":"'$userId'", ":ts": '"$ts"'}' | jq
}

function ddaActivityAlerts() {
local userId=$(_dbGetUserId $1)
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
ddget --tableName="Argus-ActivityAlerts-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="userId = :userId and expiry > :expiry" \
      --expressionAttributeValues='{":userId":"'$userId'", ":expiry": '"$ts"'}' | jq
}

function ddaArgusSettings() {
local accountId=$(_dbGetAccountId $1)
local organizationId=$(_dbGetOrganizationId $2)
ddget --tableName="Argus-Settings-$_ARGUS_DD_SUFFIX" \
    --keyConditionExpression="accountId = :accountId and organizationId = :organizationId" \
    --expressionAttributeValues='{":accountId":"'$accountId'", ":organizationId": "'$organizationId'"}' | jq
}

function ddaSessionActivities() {
local userId=$(_dbGetUserId $1)
local appId=$(_dbGetAppId $2 $3) #eg _dbGetAppId CAS a|m|cc

ddget --tableName="Argus-SessionActivities-$_ARGUS_DD_SUFFIX" \
    --keyConditionExpression="userId = :userId and appId = :appId" \
    --expressionAttributeValues='{":userId":"'$userId'", ":appId": "'$appId'"}' | jq
}

