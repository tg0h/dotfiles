# NOTE: zsh parameter expansion only happens within single quotes "$HOME" expands, '$HOME' gives literal value
# ALL
# filter pattern requires '"<filter>"' ... strange

function cwargus-ms-session-dev() {
  awslogs get /aws/ecs/argus-ms-session-dev ALL --filter-pattern='"'$1'"' --since "$2" --no-group --no-stream
}

function cwargus-ms-userdev() {
  awslogs get /aws/ecs/argus-ms-user-dev ALL --filter-pattern='"'$1'"' --start "$2" --no-group --no-stream
}

# convert epoch time in ms to date
function ctime() {
  ms=${1: -3} #get last 3 digits (milliseconds)
  y=${1%???} #another way to remove last 3 chars
  ts=${1:0:-3} #remove last 3 chars to get epoch ts without ms

  strftime "%a %b %e %H:%M:%S.$ms %Y" $ts
}

#provide adjustment and return time in epoch ms
function datev(){
print $(($(date -v -$1 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
}

##tim -5m CAS SAP a
function ddaGetActivity(){
  print '====================================== Argus Settings     ========================================='
  ddaArgusSettings $3 $4
  print '====================================== User Activities    ========================================='
  ddaUserActivities $1 $2
  print '====================================== Activity Alerts    ========================================='
  ddaActivityAlerts $1 $2
  print '====================================== Session Activities ========================================='
  ddaSessionActivities $1 $3 $5
}

#tim CAS a
function ddaSessions() {
local userId=$(_dbGetUserId $1) #TODO: throws error if returns more than 1 user
local appId=$(_dbGetAppId $2 $3) #eg _dbGetAppId CAS a|m|cc
ddget --tableName="Argus-Sessions-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="userId = :userId and appId = :appId" \
      --expressionAttributeValues='{":userId":"'$userId'", ":appId": "'$appId'"}' \
      | jq
}

############################################### ACTIVITIES ################################################

##CAS SAP
function ddaArgusSettings() {
local accountId=$(_dbGetAccountId $1)
local organizationId=$(_dbGetOrganizationId $2)
ddget --tableName="Argus-Settings-$_ARGUS_DD_SUFFIX" \
    --keyConditionExpression="accountId = :accountId and organizationId = :organizationId" \
    --expressionAttributeValues='{":accountId":"'$accountId'", ":organizationId": "'$organizationId'"}' | jq
}

##tim -5m
function ddaUserActivities() {
local userId=$(_dbGetUserId $1)
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
#use homebrew aws js sdk node module cli to get dynamodb response as normal json instead of as a dynamodb attribute value map
ddget --tableName="Argus-UserActivities-$_ARGUS_DD_SUFFIX" \
    --keyConditionExpression="userId = :userId and ts > :ts" \
    --expressionAttributeValues='{":userId":"'$userId'", ":ts": '"$ts"'}' #| jq
}

##tim -5m
function ddaActivityAlerts() {
local userId=$(_dbGetUserId $1)
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
ddget --tableName="Argus-ActivityAlerts-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="userId = :userId and expiry > :expiry" \
      --expressionAttributeValues='{":userId":"'$userId'", ":expiry": '"$ts"'}' | jq
}

#tim CAS a
function ddaSessionActivities() {
local userId=$(_dbGetUserId $1)
local appId=$(_dbGetAppId $2 $3) #eg _dbGetAppId CAS a|m|cc
# ddget --tableName="Argus-SessionActivities-$_ARGUS_DD_SUFFIX" \
#     --keyConditionExpression="userId = :userId and appId = :appId" \
#     --expressionAttributeValues='{":userId":"'$userId'", ":appId": "'$appId'"}' | jq
_ddaSessionActivities $userId $appId
}

function _ddaSessionActivities() {
ddget --tableName="Argus-SessionActivities-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="userId = :userId and appId = :appId" \
      --expressionAttributeValues='{":userId":"'$1'", ":appId": "'$2'"}'
}

############################################### TASKS ################################################
#SAP
function ddaTaskCategories() {
# ddaTaskCategories SAP | jq '.Items | map(select(.categoryName | contains("Respond")))'
local organizationId=$(_dbGetOrganizationId $1)
ddget --tableName="Argus-TaskCategories-$_ARGUS_DD_SUFFIX" \
      --indexName="siteId-index" \
      --keyConditionExpression="siteId = :siteId" \
      --expressionAttributeValues='{":siteId":"'$organizationId'"}' \
      | jq
}

#--------------------------------------------------------------------------------------------------
#Task Templates

##CAS SAP
function ddaTaskTemplates() {
ddget --tableName="Argus-TaskTemplates-$_ARGUS_DD_SUFFIX" \
    --keyConditionExpression="TaskTemplateID = :TaskTemplateID" \
    --expressionAttributeValues='{":TaskTemplateID":"'$1'"}' | jq
}

#--------------------------------------------------------------------------------------------------
# DUTY PLAN

#
function ddaDutyPlans-Id() {
#need to specify #name as name is an aws reserved keyword
#TODO: getopts
ddget --tableName="Argus-DutyPlans-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="id = :id" \
      --expressionAttributeValues='{":id":"'$1'"}' \
      | jq
}

#<duty plan name search string>
function ddaDutyPlans-Name() {
#need to specify #name as name is an aws reserved keyword
#TODO: getopts
ddget --tableName="Argus-DutyPlans-$_ARGUS_DD_SUFFIX" \
      --filterExpression="contains(#name, :name)" \
      --expressionAttributeNames='{"#name":"name"}' \
      --expressionAttributeValues='{":name":"'$1'"}' \
      -m scan \
      | jq
}

#SAP [projection expression]
function ddaDutyPlans-Site() {
local organizationId=$(_dbGetOrganizationId $1)
ddget --tableName="Argus-DutyPlans-$_ARGUS_DD_SUFFIX" \
      --filterExpression="contains(siteId, :siteId)" \
      --expressionAttributeValues='{":siteId":"'$organizationId'"}' \
      --projectionExpression="$2" \
      -m scan \
      | jq
}


#<duty plan name> COMPLETED 5M (Scheduled At)
function ddaTaskSchedules() {
local dutyPlanId=$(ddaDutyPlans-Name "$1" | jq -r '.Items[].id')
local ts=$(($(date -v -$3 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
#TODO: getopts
# trigger states:
#        WAITING -  Waiting to be created as a task
#        PAUSED - Job trigger is paused, will not be created as a task until returned to WAITING
#        EXPIRED - Job trigger is expired / did not trigger at the scheduled time, will not be created as task
#        CANCELLED - Job trigger is cancelled, will not be created as task
#        ERROR - Job trigger error
#        COMPLETED - Completed job trigger, has already been created as a task
ddget --tableName="Argus-TaskSchedules-$_ARGUS_DD_SUFFIX" \
      --indexName="triggerState-scheduledAt-index" \
      --keyConditionExpression="triggerState = :triggerState and scheduledAt > :scheduledAt" \
      --filterExpression="dutyPlanId = :dutyPlanId" \
      --expressionAttributeValues='{":dutyPlanId":"'$dutyPlanId'", ":triggerState":"'$2'", ":scheduledAt": '"$ts"'}' \
      | jq
}
#--------------------------------------------------------------------------------------------------
#Tasks

#tim 10M
function ddaTasks-Officer() {
local userId=$(_dbGetUserId $1)
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
#TODO: show error if unable to return json
ddget --tableName="Argus-Tasks-$_ARGUS_DD_SUFFIX" \
      --indexName="OfficerID-startTime-index" \
      --keyConditionExpression="OfficerID = :OfficerID and startTime > :startTime" \
      --expressionAttributeValues='{":OfficerID":"'$userId'", ":startTime": '"$ts"'}' \
      --scanIndexForward="false" \
      | jq
}

#SAP 10M
function ddaTasks-Site() {
local organizationId=$(_dbGetOrganizationId $1)
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms

#TODO: getopts
ddget --tableName="Argus-Tasks-$_ARGUS_DD_SUFFIX" \
      --indexName="siteId-startTime-index" \
      --keyConditionExpression="siteId = :siteId and startTime > :startTime" \
      --expressionAttributeValues='{":siteId":"'$organizationId'", ":startTime": '"$ts"'}' \
      --scanIndexForward="false" \
      | jq
}
#--------------------------------------------------------------------------------------------------
#Task Updates

#SAP 10M
function ddaTaskUpdates-Site() {
echo hello
local organizationId=$(_dbGetOrganizationId $1) #get site id
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms

#TODO: getopts
ddget --tableName="Argus-TaskUpdates-$_ARGUS_DD_SUFFIX" \
      --indexName="siteId-updatedAt-index" \
      --keyConditionExpression="siteId = :siteId and updatedAt > :updatedAt" \
      --expressionAttributeValues='{":siteId":"'$organizationId'", ":updatedAt": '"$ts"'}' \
      --scanIndexForward="false" \
      | jq
}

#SAP 10M
function ddaTaskUpdates-Task() {
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
#TODO: getopts
ddget --tableName="Argus-TaskUpdates-$_ARGUS_DD_SUFFIX" \
      --indexName="taskId-updatedAt-index" \
      --keyConditionExpression="taskId = :taskId and updatedAt > :updatedAt" \
      --expressionAttributeValues='{":taskId":"'$1'", ":updatedAt": '"$ts"'}' \
      --scanIndexForward="false" \
      | jq
}

####################################################################################################
# INCIDENTS

#SAP 10M [projection expression]
function ddaIncidents-Id() {
ddget --tableName="Argus-Incidents-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="IncidentID = :IncidentID" \
      --expressionAttributeValues='{":IncidentID":"'$1'"}' \
      --projectionExpression="$2" \
      | jq
}

#SAP 10M [projection expression]
function ddaIncidents-Site() {
local organizationId=$(_dbGetOrganizationId $1)
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
# echo $organizationId
#TODO: getopts
ddget --tableName="Argus-Incidents-$_ARGUS_DD_SUFFIX" \
      --indexName="siteId-createdAt-index" \
      --keyConditionExpression="siteId = :siteId and createdAt > :createdAt" \
      --expressionAttributeValues='{":siteId":"'$organizationId'", ":createdAt": '"$ts"'}' \
      --projectionExpression="$3" \
      --scanIndexForward="false" \
      | jq
}

#SAP 10M
function ddaIncidentUpdates-Id() {
local incidentId=$1
local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
#TODO: getopts
ddget --tableName="Argus-IncidentUpdates-$_ARGUS_DD_SUFFIX" \
      --indexName="incidentId-updatedAt-index" \
      --keyConditionExpression="incidentId = :incidentId and updatedAt > :updatedAt" \
      --expressionAttributeValues='{":incidentId":"'$incidentId'", ":updatedAt": '"$ts"'}' \
      --scanIndexForward="false" \
      | jq
}
#--------------------------------------------------------------------------------------------------
# INCIDENT CATEGORIES

#
function ddaIncidentCategories() {
ddget --tableName="Argus-IncidentCategories-$_ARGUS_DD_SUFFIX" \
      -m scan \
      | jq
}

#SAP [projection expression]
function ddaIncidentCategories-Id() {
ddget --tableName="Argus-IncidentCategories-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="CategoryID = :CategoryID" \
      --expressionAttributeValues='{":CategoryID":"'$1'"}' \
      | jq
}

#SAP [projection expression]
function ddaIncidentCategories-Site() {
local organizationId=$(_dbGetOrganizationId $1)
ddget --tableName="Argus-IncidentCategories-$_ARGUS_DD_SUFFIX" \
      --indexName="siteId-index" \
      --keyConditionExpression="siteId = :siteId" \
      --expressionAttributeValues='{":siteId":"'$organizationId'"}' \
      --scanIndexForward="false" \
      | jq
}

####################################################################################################
# LOCATIONS

#
function ddaLocations() {
ddget --tableName="Argus-Locations-$_ARGUS_DD_SUFFIX" \
      -m scan \
      | jq
}

#SAP 10M [projection expression]
function ddaLocations-Id() {
ddget --tableName="Argus-Locations-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="LocationID = :LocationID" \
      --expressionAttributeValues='{":LocationID":"'$1'"}' \
      --projectionExpression="$2" \
      | jq
}

#SAP [projection expression]
function ddaLocations-Site() {
local organizationId=$(_dbGetOrganizationId $1)
ddget --tableName="Argus-Locations-$_ARGUS_DD_SUFFIX" \
      --indexName="siteId-active-index" \
      --keyConditionExpression="siteId = :siteId" \
      --expressionAttributeValues='{":siteId":"'$organizationId'"}' \
      --scanIndexForward="false" \
      | jq
}

####################################################################################################
# ANNOUNCEMENTS & ACKNOWLEDGEMENTS

#SAP [projection expression]
function ddaAcknowledgements() {
ddget --tableName="Argus-Acknowledgements-$_ARGUS_DD_SUFFIX" \
      --keyConditionExpression="sourceId = :sourceId" \
      --expressionAttributeValues='{":sourceId":"'$1'"}' \
}
#
#SAP [projection expression]
function ddaAnnouncements() {
while getopts 'vs:e:' opt; do
  case "$opt" in
    v) local v='-v' ;; #verbose
    s) local s=$(($(date -v -$OPTARG +%s)*1000)) ;; #start time
    e) local e=$(($(date -v -$OPTARG +%s)*1000)) ;; #end time
  esac 
done
shift $(($OPTIND - 1))

local organizationId=$(_dbGetOrganizationId $1)

if [[ -v s ]] && [[ -v e ]]; then
  kce="siteId = :siteId and startAt between :start and :end" \
  eav='{":siteId":"'$organizationId'", ":start": '"$s"', ":end":'"$e"'}'
else
  local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
  kce="siteId = :siteId and startAt > :startAt" \
  eav='{":siteId":"'$organizationId'", ":startAt": '"$ts"'}'
fi

ddget --tableName="Argus-Announcements-$_ARGUS_DD_SUFFIX" \
      --indexName="siteId-startAt-index" \
      --keyConditionExpression=$kce \
      --expressionAttributeValues=$eav \
      $v \
      | jq
}

####################################################################################################
# Log Books, Duty Posts, Occurrences and Headings

function ddaDutyPosts() {
while getopts 'v' opt; do
  case "$opt" in
    v) local v='-v' ;; #verbose
  esac 
done
shift $(($OPTIND - 1))

local organizationId=$(_dbGetOrganizationId $1)
ddget --tableName="Argus-DutyPosts-$_ARGUS_DD_SUFFIX" \
      --filterExpression="siteId = :siteId" \
      --expressionAttributeValues='{":siteId":"'$organizationId'"}' \
      -m scan \
      $v \
      | jq
}

function ddaLogBooks() {
while getopts 'v' opt; do
  case "$opt" in
    v) local v='-v' ;; #verbose
  esac 
done
shift $(($OPTIND - 1))

local organizationId=$(_dbGetOrganizationId $1)
ddget --tableName="Argus-Logbooks-$_ARGUS_DD_SUFFIX" \
      --filterExpression="siteId = :siteId" \
      --expressionAttributeValues='{":siteId":"'$organizationId'"}' \
      -m scan \
      $v \
      | jq
}

function ddaOccurrenceHeadings() {
while getopts 'v' opt; do
  case "$opt" in
    v) local v='-v' ;; #verbose
  esac 
done
shift $(($OPTIND - 1))

local organizationId=$(_dbGetOrganizationId $1)
ddget --tableName="Argus-OccurrenceHeadings-$_ARGUS_DD_SUFFIX" \
      --filterExpression="siteId = :siteId" \
      --expressionAttributeValues='{":siteId":"'$organizationId'"}' \
      -m scan \
      $v \
      | jq
}

#ddaOccurrences -s 1d -e 1M SAP
#ddaOccurrences SAP 5m
function ddaOccurrences() {
while getopts 'vs:e:' opt; do
  case "$opt" in
    v) local v='-v' ;; #verbose
    s) local s=$(($(date -v -$OPTARG +%s)*1000)) ;; #start time
    e) local e=$(($(date -v -$OPTARG +%s)*1000)) ;; #end time
  esac 
done
shift $(($OPTIND - 1))

local organizationId=$(_dbGetOrganizationId $1)

if [[ -v s ]] && [[ -v e ]]; then
  kce="siteId = :siteId and timeAt between :start and :end" \
  eav='{":siteId":"'$organizationId'", ":start": '"$s"', ":end":'"$e"'}'
else
  local ts=$(($(date -v -$2 +%s)*1000)) ##convert a relative time ymwdHMS to an epoch ts in ms
  kce="siteId = :siteId and timeAt > :startAt" \
  eav='{":siteId":"'$organizationId'", ":startAt": '"$ts"'}'
fi

ddget --tableName="Argus-Occurrences-$_ARGUS_DD_SUFFIX" \
      --indexName="siteId-timeAt-index" \
      --keyConditionExpression=$kce \
      --expressionAttributeValues=$eav \
      $v \
      | jq
}
