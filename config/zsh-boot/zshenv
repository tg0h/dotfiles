#XDG setup

# https://wiki.debian.org/XDGBaseDirectorySpecification
# https://unix.stackexchange.com/questions/390922/whats-the-difference-between-a-binary-file-and-a-library
# if it needs git, it may not be data

# base
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME=$HOME/.cache # analogous to /var/cache
export XDG_DATA_HOME=$HOME/.local/share # data that doesn't need to be modified, eg font files. write once.
export XDG_STATE_HOME=$HOME/.local/state # eg logs, history. data persists btw restarts
export XDG_RUNTIME_DIR=/tmp
# user
export XDG_DESKTOP_DIR="$HOME/Desktop"
export XDG_DOWNLOAD_DIR="$HOME/Downloads"
export XDG_TEMPLATES_DIR="$HOME/Templates"
export XDG_PUBLICSHARE_DIR="$HOME/Public"
export XDG_DOCUMENTS_DIR="$HOME/Documents"
# export XDG_MUSIC_DIR="$HOME/Music"
# export XDG_PICTURES_DIR="$HOME/Pictures"
# export XDG_VIDEOS_DIR="$HOME/Videos"
export DOTFILES="$HOME/.dotfiles"

export EDITOR=nvim

# if my libs refer to undefined aliases or funcs, they will fail. This seems to
# have been solved by function autoloading.

# SECRETS - do not store secrets in git
export PASSWORD_STORE_DIR="$XDG_DATA_HOME/pass"

#XDG - store your config and data somewhere tidy
export GNUPGHOME="$XDG_DATA_HOME"/gnupg

export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME"/aws/credentials # vs AWS_CREDENTIALS?
export AWS_CONFIG_FILE="$XDG_CONFIG_HOME"/aws/config

export NVM_DIR=$XDG_DATA_HOME/nvm
export NODE_REPL_HISTORY=$XDG_DATA_HOME/node_repl_history
export DOCKER_CONFIG=$XDG_CONFIG_HOME/docker #not working?
# export GEM_HOME=$XDG_DATA_HOME/gem # rbenv does not work if GEM_HOME is set?
export GEM_SPEC_CACHE=$XDG_CACHE_HOME/gem
export RBENV_ROOT=$XDG_DATA_HOME/rbenv
export PYENV_ROOT=$XDG_DATA_HOME/pyenv
export RUSTUP_HOME="$XDG_DATA_HOME"/rustup
export CARGO_HOME="$XDG_DATA_HOME"/cargo
export GOPATH="$XDG_DATA_HOME"/go

export MYSQL_HISTFILE=$XDG_DATA_HOME/mysql_history
export PARALLEL_HOME=$XDG_CONFIG_HOME/parallel
export REDISCLI_HISTFILE=$XDG_DATA_HOME/redis/rediscli_history
export REDISCLI_RCFILE=$XDG_CONFIG_HOME/redis/redisclirc
# export GRADLE_USER_HOME="$XDG_DATA_HOME"/gradle
export SQLITE_HISTORY=$XDG_DATA_HOME/sqlite_history
export TEALDEER_CONFIG_DIR=~/.config/tealdeer # https://dbrgn.github.io/tealdeer/config.html
export TEALDEER_CACHE_DIR=~/.cache/tealdeer
# ruby bundler
export BUNDLE_USER_CONFIG=$XDG_CONFIG_HOME/bundle
export BUNDLE_USER_CACHE=$XDG_CACHE_HOME/bundle
export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME"/bundle
export SOLARGRAPH_CACHE=$XDG_CACHE_HOME/solargraph
export RIPGREP_CONFIG_PATH=$XDG_CONFIG_HOME/ripgrep/ripgreprc

export LG_CONFIG_FILE=$XDG_CONFIG_HOME/lazygit/config.yml,$XDG_CONFIG_HOME/lazygit/keybinding.yml,$XDG_CONFIG_HOME/lazygit/theme.yml,$XDG_CONFIG_HOME/lazygit/custom-commands.yml

# use these env vars when I specify jq -L $JQ_CONOFIG
export JQ_CONFIG="~/.config/jq"
export JQ_LIB="~/.local/lib/jq"

# place the homebrew binaries at the end of path, if not nvm will always point to the homebrew system node
# add homebrew to path in zshenv so that it is visible to kitty launch scripts
# export PATH="$PATH:/opt/homebrew/bin" # access aws_completer, etc
# now replaced by the homebrew brew shellenv command in zprofile

export ZSH_FUNCTIONS_PATH="$HOME/.local/lib/zsh-functions"
export ZSH_FUNCTIONS_COMPILED_PATH="$HOME/.local/lib/zsh-functions-compiled"

# alias yarn='yarn --use-yarnrc "$XDG_CONFIG_HOME/yarn/config"'

_Z_DATA=$XDG_DATA_HOME/z/z # z stores its dir frecency list here

# autoload zsh functions - loading from a single directory provides a speedup of up to 0.05
fpath=($ZSH_FUNCTIONS_PATH $ZSH_FUNCTIONS_COMPILED_PATH $fpath)
autoload $ZSH_FUNCTIONS_PATH/*
autoload $ZSH_FUNCTIONS_COMPILED_PATH/*

### NOTE: Source my config - so that aliases are available to nt 
setopt EXTENDED_GLOB # use ~ to exclude patterns in file globbing
source $XDG_CONFIG_HOME/zsh/start/SOURCEME.zsh # source oh-my-zsh and other custom plugins
for f in $XDG_CONFIG_HOME/zsh/***/*.zsh~*/start/*; do # exclude start folders
  source $f
done 
unsetopt EXTENDED_GLOB

# asst > /dev/null
