gui:
  theme:
    activeBorderColor:
      - "#ff00ff"
      - bold
    inactiveBorderColor:
      - yellow
    selectedLineBgColor:
      - reverse
    selectedRangeBgColor:
      - reverse
    optionsTextColor:
      - blue
    cherryPickedCommitBgColor:
      - blue
    cherryPickedCommitFgColor:
      - cyan
    unstagedChangesColor:
      - red
keybinding:
  universal:
    #     prevItem-alt: 't' # go one line up (vim k)
    #     nextItem-alt: 'h' # go one line down (vim j)
    #     scrollUpMain-alt1: 'T' # main panel scroll up
    #     scrollDownMain-alt1: 'H' # main panel scroll down
    #     scrollLeft: 'D' # scroll left within list view
    #     scrollRight: 'n' # scroll right within list view
    #     prevBlock-alt: 'd' # goto the previous block / panel
    nextBlock-alt: "s" # goto the next block / panel
  files:
    stashAllChanges: "l"
  commits:
    squashDown: "l"
git:
  paging:
    colorArg: always
    pager: delta --dark --paging=never
customCommands:
  - key: "t"
    context: "files"
    prompts:
      - type: "menu"
        options:
          - name: "feat"
            description: "A new feature"
            value: "feat"
          - name: "fix"
            description: "A bug fix"
            value: "fix"
          - name: "docs"
            description: "Documentation only changes"
            value: "docs"
          - name: "style"
            description: "Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"
            value: "style"
          - name: "refactor"
            description: "A code change that neither fixes a bug nor adds a feature"
            value: "refactor"
          - name: "test"
            description: "Adding missing tests or correcting existing tests"
            value: "test"
          - name: "chore"
            description: "Other changes that don't modify src or test files"
            value: "chore"
      - type: "input"
        title: "message:"
        initialValue: ""
    command: 'git-conventional-commit -f {{.SelectedFile.Name}} -t {{index .PromptResponses 0}} -m "{{index .PromptResponses 1}}"'
