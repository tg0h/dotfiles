# zsh rc load order
# https://scriptingosx.com/2019/06/moving-to-zsh-part-2-configuration-files/
# https://www.reddit.com/r/zsh/comments/dwwq6l/trying_to_move_my_z_dotfiles_into_configzsh_but/f7m8z3h/
# login vs non-login
# interactive vs non-interactive

# The files in /etc/ will be launched (when present) for all users. 
# etc zprofile, zshrc, and zlogin 
# The .z* files only for the individual user

# before every .zsh file, the corresponding /etc/zsh file is run
# eg
#   /etc/zshenv is run before .zshenv
#   /etc/zprofile is run before .zprofile
#   /etc/zshrc is run before .zshrc
#
# zprofile is an analog of bash's and sh's profile
# zlogin is an analog for ksh's login files
#
# zsh login interactive
# (apart from the /etc/zshenv file, the other etc files are not shown for brevity)
#   /etc/zshenv > zshenv > zprofile > zshrc > zlogin ... > zlogout
# zsh login non-interactive
#   /etc/zshenv > zshenv > zprofile >         zlogin ... > zlogout
# zsh non-login interactive
#   /etc/zshenv > zshenv >            zshrc 
# zsh non-login non-interactive
#   /etc/zshenv > zshenv

# export the env variable so other apps, eg mutt can use them
export GMAIL_TIMTESTALLTHETHINGS_PASSWORD=***REMOVED***
export APPCENTER_ACCESS_TOKEN=***REMOVED***

# source my functions in the .zshenv file so that they are available
# in a non-interactive shell, eg zsh -c "<my function name>" will work

# source every file in the .zsh and .abs folder
# the **/* glob is peculiar to zsh
# it allows zsh to search recursively
# source every file (include subdirs) in .zsh
local f
for f in ~/.local/lib/zsh/**/*; do [[ -f $f ]] && . $f; done
for f in ~/.local/lib/abs/**/*.zsh; do [[ -f $f ]] && . $f; done

. ~/.local/lib/scratch

# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
# https://wiki.archlinux.org/title/XDG_Base_Directoryhttps://wiki.archlinux.org/title/XDG_Base_Directory
# analogous to /etc
export XDG_CONFIG_HOME="$HOME/.config"
# analogous to /var/cache
export XDG_CACHE_HOME=$HOME/.cache

# https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch04s11.html
# analogous to /usr/share
# what is /usr
# single user (safe mode ...) mode vs multi-user mode (/usr)
# what is /usr vs /usr/local
# historically, when disk space was expensive, /usr was shared over nfs while 
# whatever was particular to a computer was in /usr/local
# software in / or /usr may be overwritten by system upgrades, let the sysadmin 
# have full reign over /usr/local
# Any program or package which contains or requires data that doesn't need to be modified should store that data in /usr/share (or /usr/local/share, if installed locally).
export XDG_DATA_HOME=$HOME/.local/share

# state data that should persist between (application) restarts, but that is not 
# important or portable enough to the user that it should be stored in 
# $XDG_DATA_HOME. It may contain:
# actions history (logs, history, recently used files)
# current state of the application that can be reused on a restart (view, layout, open files, undo history)
# analogous to /var/lib
export XDG_STATE_HOME=$HOME/.local/state

# Runtime files include filesystem objects such are sockets or named pipes that 
# are used for communication internal to the application. Runtime files must not 
# be accessible to anyone except current user.

# use vim keys with mcfly
export MCFLY_KEY_SCHEME=vim
export MCFLY_FUZZY=true
. "$HOME/.cargo/env"

# look in XDG dirs for zsh dotfiles
# https://superuser.com/questions/874901/what-are-the-step-to-move-all-your-dotfiles-into-xdg-directories
# export ZDOTDIR=$HOME/.config/zsh
# export ZDOTDIR=${ZDOTDIR:=${XDG_CONFIG_HOME}/zsh}
# source $ZDOTDIR/.zshenv

NETLIFY_AUTH_TOKEN=***REMOVED***

JIRA_USERNAME=***REMOVED***
JIRA_PASSWORD="***REMOVED***"
JIRA_SECRET=$JIRA_USERNAME:$JIRA_PASSWORD

GITHUB_TOKEN=***REMOVED***

# use this for my gitlab
GITLAB_PRIVATE_TOKEN=***REMOVED***

# use this to shut down nas via ssh
NAS_SSH_PASSWORD=***REMOVED***

# app center current app
export MOBILE_CENTER_CURRENT_APP=***REMOVED***

# my phones
# android 11 wireless debugging changes the port and turns off wireless debugging
# when you restart the wifi
# not convenient!

# export HP_RED_IP=192.168.1.19:43358
export HP_RED_IP=192.168.1.19:5555
export HP_RED_SERIAL=R58M52BJJXP
export HP_YELLOW_IP=192.168.1.188:5555
export HP_BLUE_IP=192.168.1.64:5555
export HP_CALLTREE_IP=192.168.1.170:5555

# mcfly
export MCFLY_KEY_SCHEME=vim
export MCFLY_RESULTS=50
export MCFLY_FUZZY=true

#Argus
export ARGUS_LOGCAT_FILTER_KOTLIN="$XDG_CONFIG_HOME/argus/adb/argus.logcatFilter.kotlin.txt"

#OS
export EDITOR=nvim

