#!bin/zsh

# This is a core redis cache utility function that can be used by other cli functions
# to cache for example an api post body
function rcache(){
  # rcache gets the api results from the cache or calls the api for you
  # rcache <cache key[.expiry]> <function> <option 1> <option 2> ...
  # rcache key.604800 funcToCall funcArg1 funcArg2
  # the -r reload option ignores the cache, fetches the function result and stores it in cache
  # rcache -r ...
  # eg rcache jira/ras.60 ras
  #
  # NOTE: DO NOT ECHO any output other than the function output
  # callers of rcache expect that rcache will only output the cache/func value
  # to stdout

  # model cache behaviour options on browser fetch api
  # https://developer.mozilla.org/en-US/docs/Web/API/Request/cache
  local cacheReload

  while getopts 'r' opt; do
    case "$opt" in
      r) cacheReload=true ;;
    esac
  done
  shift $(($OPTIND - 1))

  if [[ $# -lt 2 ]]; then
    echo $fg[red]error:$reset_color 'please provide a <cache key> and the <function> to call' >&2
    return 1
  fi

  local cacheKeyExpiry func
  # echo number of args is $#
  cacheKeyExpiry="$1"
  func="$2"
  shift 2
  # pop the 1st 2 args off the arg list
  # now the old $3 is the new $1

  local cacheKey cacheExpiry
  # cacheKeyExpiry may be test.123 ( key of test, expiry of 123 seconds ) or
  # test (no expiry specified)
  if [[ "$cacheKeyExpiry" =~ "\." ]]; then
    # we do not want a greedy match for the cache key?
    # a greedy match will ignore multiple periods
    # eg passing in prefix..suffix will stil parse correctly, removing both periods

    # eg compare jira/ras.123
    # eg compare jira/ras.app.1.6.7.123
    # eg compare jira/ras
    cacheKey=${cacheKeyExpiry%\.*} # % means lazily match the first pattern \.* and remove pattern from end
    cacheExpiry=${cacheKeyExpiry##*\.} # # means greedily match pattern *\. and remove from the start
  else
    cacheKey=$cacheKeyExpiry
  fi

  local response cacheValue funcResult
  #rcg = redis-cli get
  # cacheKey may contain spaces, add quotes around $cacheKey
  # eg jira/rapvi/Optimax CC 1.2.3
  cacheValue=$(rcg "$cacheKey") 

  if [[ -z "$cacheValue" ]] || [[ -n "$cacheReload" ]]; then
    # echo number of args is $#
    # echo remaining args is $@
    # echo $fg[green] 'calling function' $func $reset_color
    # TODO: if there are spaces in $@, then each space results in separate args to $func
    # this is a difficult problem to solve
    # echo rcache: calling funcResult with $@ >> rcache.log
    funcResult=$(eval $func "$@")
    #rcs sets the cache, ignores expiry if none provided
    rcs "$cacheKey" "$funcResult" "$cacheExpiry"
  fi
  # return the cache value. if null, return funcResult
  echo ${cacheValue:-$funcResult}
}

# this is a hard problem
# passing 
# tt(){
#   func="ttt"
#   eval "$func "$@""
# }

# ttt(){
#   local arg1 arg2
#   arg1=$1
#   arg2=$2

#   echo arg1 is $arg1
#   echo arg2 is $arg2
# }

