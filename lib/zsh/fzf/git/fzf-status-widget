#!bin/zsh

function fzf-status-widget(){
  # ctrl-d to delete branch
  # select to switch to branch
  is_in_git_repo || return

  local basename=fzf-status-widget

  local HEADER=$(cat <<-EOF
     ⌃ a - git add .
     ⌃ o - git reset --mixed (reset everything)
     ⌃ z - discard changes
     ⌃ e - edit in nvim
     ⌃ - - git commit
   ⌃ h/t - add/reset
EOF
)

  local reverse_tmp_file
  if reverse_tmp_file="$(mktemp "/tmp/${basename}_reverse".XXXXXX)"; then
    # dil's default reverse option is reverse to sort by created at descending
    # set up the initial state to reflect this
    printf 'r' > "${reverse_tmp_file}" 
  fi

  local sortBy_tmp_file
  if sortBy_tmp_file="$(mktemp "/tmp/${basename}_sortBy".XXXXXX)"; then
    printf 'c' > "${sortBy_tmp_file}" # not in use, but need to pass in dummy variable
  fi

  local filter_tmp_file 
  if filter_tmp_file="$(mktemp "/tmp/${basename}_filter".XXXXXX)"; then
    printf '' > "${filter_tmp_file}"
  fi

  local preview="git-get-scope {2}; git diff --dirstat --stat --numstat --parents --abbrev-commit --patch --notes --color=always HEAD {2} | delta -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}"
      # --preview 'git diff --dirstat --stat --numstat --parents --abbrev-commit --patch --notes --color=always HEAD {2} | delta -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}' \
   local RELOAD="git -c color.status=always status -s"
   local out=$( ${=RELOAD} |
    fzf --ansi --multi \
      --header=$HEADER \
      --preview-window right,noborder,80% \
      --bind 'ctrl-/:change-preview-window(down,80%,border-top|right,50%|hidden|)' \
      --preview "$preview" \
      --bind 'alt-g:reload(
        git branch -a --color=always --sort=-committerdate | sort -r
      )+change-prompt(sort-commit-date>)' \
      --bind "ctrl-a:execute(git add .)+reload:$RELOAD" \
      --bind "ctrl-o:execute(git reset --mixed)+reload:$RELOAD" \
      --bind "ctrl-e:execute(nvim {2} > /dev/tty 2>&1)+reload:$RELOAD" \
      --bind "ctrl-z:execute(git checkout HEAD -- {2})+reload:$RELOAD" \
      --bind "ctrl-]:execute(git-conventional-commit -e -f {2} )+reload:$RELOAD" \
      --bind "ctrl-h:execute-silent(git add -- {+2..})+reload:$RELOAD" \
      --bind "ctrl-t:execute-silent(git reset -- {+2..})+reload:$RELOAD" \
      --bind "ctrl-r:reload(
                # reverse
                printf 's' > \"${sortBy_tmp_file}\"; 
                _fzf-docker-image-widget-toggle \"${reverse_tmp_file}\" reverse;
                _fzf-brancher-widget-state \"${sortBy_tmp_file}\" ${reverse_tmp_file} ${filter_tmp_file};
              )+change-prompt(size> )" \
      --bind "alt-g:reload(
                # toggle my branches
                _fzf-docker-image-widget-toggle \"${filter_tmp_file}\" m a;
                _fzf-brancher-widget-state \"${sortBy_tmp_file}\" ${reverse_tmp_file} ${filter_tmp_file};
              )" \
      --bind "alt-c:reload(
                # toggle my team branches
                _fzf-docker-image-widget-toggle \"${filter_tmp_file}\" t a;
                _fzf-brancher-widget-state \"${sortBy_tmp_file}\" ${reverse_tmp_file} ${filter_tmp_file};
              )" \
      --expect=alt-d
  )
    # --bind 'space:down' \
    # --bind 'tab:up' \

  local key=$(head -1 <<< "$out")
  local targets=$(tail -n +2 <<< "$out") # get all lines after the first line
  local target1=$(head -1 <<< "$targets")

  if [ "$key" = alt-d ]; then
     local branches=()

     while IFS= read -r gitbranchline ; do 
       # remove *
       local branch=$(sed s/^\*// <<< $gitbranchline | choose 5)
       branches+=($branch)
     done <<< "$targets"

     for branch in $branches; do
       git branch -D $branch
     done
     zle reset-prompt
     return
  fi

  if [ $target1 ]; then
    local hashes=$(echo $targets | choose 1 | join-lines)
    LBUFFER+=$hashes
    # the targetBranch ref name may contain a prefix eg origin/...
    # local targetBranch=$(sed s/^\*// <<< $target1 | choose 5)
    # # remove any prefix from the refname
    # local branch=$(sed 's#^origin/##' <<< $targetBranch)
    # if [ $(git branch -l $branch) ]; then
    #   # if the branch exists, just switch to the branch
    #   git checkout $branch
    # else
    #   # create a new branch with a simplified name, without the remotes/origin prefix
    #   git checkout -b $branch $targetBranch
    # fi
  fi
  rm -f "${reverse_tmp_file}" &> /dev/null
  rm -f "${sortBy_tmp_file}" &> /dev/null
  rm -f "${filter_tmp_file}" &> /dev/null
  zle reset-prompt
}
