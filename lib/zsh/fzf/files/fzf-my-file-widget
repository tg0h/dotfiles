#!/bin/zsh

# TODO: pass selected file to git log preview to limit scope of change
function fzf-my-file-widget() {
  # my file widget
  # note: kitty maps C-- to C-\

  local basename="fzf-my-file-widget"

  local HEADER=$(cat <<-EOF
  ⌃a add file/dir(NA)  | ⌃c/⌥C trash/rm
  ⌃h recent            | ⌃t reset
  ⌃g .test files       | ⌃c no ignore | ⌃r files | ^f dirs
  ⌥v .env files        | ⌃s service files
  ⌃\\ no .test files   | ⌃⌥t prefix with ts-node
  ⌥g/⌥r depth 1/2      | ⌃b tsx files
  ⌃o/⌥b blame preview/blame
  ⌃l    log history of selected file
  ⌃⌥n   node <file>
EOF
)
  local FD_COMMAND="fd $FD_OPTIONS"
  local FD_OPTIONS="--color always --follow --hidden"
  # local FILE_PREVIEW="[[ \$(file --mime {}) =~ inode/directory ]] && exa --tree --long --icons --git --color always --octal-permissions --sort created --reverse {} || (bat --style=numbers,header-filename --color=always {} || cat {}) 2> /dev/null | head -300"
  local BLAME_PREVIEW="git blame {} | delta --hyperlinks"

  if blame_state="$(mktemp "/tmp/${basename}_blame_state".XXXXXX)"; then
    printf 'blame' > "${blame_state}"
  fi

  if logger_blame_state="$(mktemp "/tmp/${basename}_logger_blame_state".XXXXXX)"; then
    printf '' > "${logger_blame_state}"
  fi

        # --bind "ctrl-a:execute(fzf-make-dir {1} $(pwd))+reload(fd $FD_OPTIONS)" \
  local out=$(fd ${=FD_OPTIONS} | 
    FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS" fzf --ansi \
        --header="$HEADER"\
        --header-first \
        --preview="fzf-fd-preview {}" \
        --preview-window='bottom:nowrap,noborder,55%' \
        --bind="alt-c:execute(trash {})+reload(fd $FD_OPTIONS)" \
        --bind="alt-C:execute(rm {})+reload(fd $FD_OPTIONS)" \
        \
        --bind "ctrl-f:reload(fd $FD_OPTIONS --type d)+change-prompt(dir> )" \
        --bind "ctrl-g:reload(fd $FD_OPTIONS --type f --case-sensitive '\.test\.' )+change-prompt(test-files> )" \
        --bind "alt-v:reload(fd $FD_OPTIONS_NO_IGNORE --type f '\.env' )+change-prompt(env-files> )" \
        --bind "ctrl-s:reload(fd $FD_OPTIONS --type f --case-sensitive 'Service\.' )+change-prompt(service-files> )" \
        --bind "ctrl-alt-d:reload(fd $FD_OPTIONS --type f . packages/daemons/tasks )+change-prompt(daemon-files> )" \
        --bind "ctrl-b:reload(fd $FD_OPTIONS --type f --extension tsx )+change-prompt(tsx-files> )" \
        --bind "ctrl-t:reload(fd $FD_OPTIONS)+change-prompt(> )" \
        --bind "ctrl-\\:reload(fd $FD_OPTIONS --type f --case-sensitive --exclude '\.test\.' )+change-prompt(exclude-test-files> )" \
        --bind "ctrl-c:reload(fd $FD_OPTIONS_NO_IGNORE)+change-prompt(no-ignore> )" \
        --bind "ctrl-r:reload(fd $FD_OPTIONS --type f)+change-prompt(file> )" \
        \
        --bind "ctrl-h:reload(fd $FD_OPTIONS --type f --exec-batch ls -lt | choose 8)+change-prompt(files-sorted> )" \
        \
        --bind "ctrl-o:change-preview(
          if grep -q 'blame' ${blame_state}; then 
            git blame {} | delta --hyperlinks
          else 
            fzf-fd-preview {}
          fi;
          _fzf-docker-image-widget-toggle $blame_state blame;
          )+refresh-preview" \
        \
        --bind "ctrl-l:reload(
          if grep -q 'logger_blame' ${logger_blame_state}; then 
            glo -n -1 -f {} 
          else 
            fd $FD_OPTIONS
          fi;
          )+clear-query+change-preview(
          if grep -q 'logger_blame' ${logger_blame_state}; then 
           git show --dirstat --stat --numstat --parents --abbrev-commit --patch --notes --color=always {6} | delta -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}
          else 
            fzf-fd-preview {}
          fi;
          )+refresh-preview+execute-silent(_fzf-docker-image-widget-toggle \"${logger_blame_state}\" logger_blame)" \
        --bind "alt-g:reload(fd $FD_OPTIONS --type f --max-depth 1 )+change-prompt(depth:1> )" \
        --bind "alt-r:reload(fd $FD_OPTIONS --type f --max-depth 2 )+change-prompt(depth:2> )" \
        --expect=alt-b,ctrl-alt-n,ctrl-alt-t
  )
  rm -f "${blame_state}" &> /dev/null
  rm -f "${logger_blame_state}" &> /dev/null

  local key=$(head -1 <<< "$out")
  local targets=$(tail -n +2 <<< "$out") # get all lines after the first line
  local target1=$(head -1 <<< "$targets")

  local id=$(gawk '{print $1}' <<< "$target1")

  if [ $id ]; then
    if [ "$key" = alt-b ]; then
      git blame $target1 | delta --hyperlinks
    elif [ "$key" = ctrl-alt-n ]; then
      node $target1
    elif [ "$key" = ctrl-alt-t ]; then
      LBUFFER+="t $target1"
    else
      if [ -f "$target1" ] || [ -d "$target1" ]; then
        # if files or dirs
        local selectedIds=$(echo $targets | join-lines)
        LBUFFER+=$selectedIds
      else
        # if git log line, get the hash
        local sha=$(gawk '{print $6}' <<< "$target1")
        LBUFFER+=$sha
      fi
    fi;
  fi

  zle reset-prompt
  return
}
