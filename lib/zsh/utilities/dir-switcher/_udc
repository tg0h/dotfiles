#!bin/zsh

# generate the function files for autoloading
function _udc(){
  # read from the config.yml file and dynamically define the ud<key> functions
  # to fzf dir switch to the configured directories
  # generate aliases for ud functions
  local outputFolder=$HOME/.local/lib/zsh/utilities/dir-switcher/out
  echo $fg[red] removing files in "$outputFolder" "..."
  [[ -n "$outputFolder" ]] && trash "$outputFolder/*"

  local configFile=$XDG_CONFIG_HOME/tg/dir-switcher/config.yml
  local aliasFile=$XDG_CONFIG_HOME/zsh/aliases/out/dir-switcher.zsh

  echo $fg[cyan] removing aliases in $aliasFile "..."
  rm -f $aliasFile

  local config=$(yq eval '.keymaps' $configFile --output-format json | jq --compact-output '.[]')
  # for row in $config; do
  # while read loop splits only on newlines, unlike for do read which splits on any whitespace

  while read row; do
    local bindkey=$(jq --raw-output '.bindkey' <<< $row)
    local dir=$(jq '.dir' <<< $row)
    # https://github.com/stedolan/jq/issues/354#issuecomment-43147898
    # // is the jq alternative operator
    # empty is a jq builtin
    local depth=$(jq '.depth // empty' <<< $row)
    local glob=$(jq '.glob // empty' <<< $row)
    local showHidden=$(jq '.["show-hidden"] // empty' <<< $row)
    local showIgnore=$(jq '.["show-ignore"] // empty' <<< $row)
    local xargs=$(jq '.xargs // empty' <<< $row)

    glob=${glob:+"-g $glob"}
    xargs=${xargs:+"-x $xargs"}
    depth=${depth:+"-l $depth"}
    showHidden=${showHidden:+"-h"}
    showIgnore=${showHidden:+"-i"}

    # NOTE: running eval adds 1s to zsh startup 
    # instead, generate and autoload the functions
    # search both directories and files
    echo "ud$bindkey() {ud -d $dir $depth "$glob" $showHidden $showIgnore $xargs}" > $outputFolder/ud$bindkey
    
    # search files only
    echo "ed$bindkey() {ud -d $dir $depth "$glob" $showHidden $showIgnore $xargs -t f}" > $outputFolder/ed$bindkey
    echo "alias .$bindkey=ed$bindkey" >> $aliasFile
    
    # search directories only
    echo "od$bindkey() {ud -d $dir $depth "$glob" $showHidden $showIgnore $xargs -t d}" > $outputFolder/od$bindkey
    echo "alias ,$bindkey=od$bindkey" >> $aliasFile

    # search filename and content
    echo "et$bindkey() {et $dir }" > $outputFolder/et$bindkey
    echo "alias }$bindkey=et$bindkey" >> $aliasFile
    
    # go to base directory
    echo "dd$bindkey() {cd $dir }" > $outputFolder/dd$bindkey
    echo "alias :$bindkey=dd$bindkey" >> $aliasFile
  done <<< $config
}
