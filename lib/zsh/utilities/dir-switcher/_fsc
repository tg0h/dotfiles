#!bin/zsh

function _fsc(){
  # fuzzy switch compile
  # generate the function files for autoloading
  # read from the config.yml file and dynamically define the fswitch<key> functions
  # to fzf dir switch to the configured directories
  # generate aliases for fswitch functions
  # ðŸ”‘
  # o<bindkey> - search dirs and files
  # u<bindkey> - search files
  # e<bindkey> - search dirs
  # .<bindkey> - search filename and content
  # :<bindkey> - goto dir
  # q<bindkey> - open dir in nvim
  local cache=$XDG_STATE_HOME/dir-switcher/cache
  local configFile=$XDG_CONFIG_HOME/tg/dir-switcher/config.yml

  local outputFolder=$DOTFILES/lib/zsh/utilities/dir-switcher/out
  echo $fg[red] removing files in "$outputFolder" "..."
  [[ -n "$outputFolder" ]] && trash "$outputFolder/*"

  local aliasFile=$XDG_CONFIG_HOME/zsh/aliases/out/dir-switcher.zsh
  echo $fg[cyan] removing aliases in $aliasFile "..."
  rm -f $aliasFile

    local jqQuery=$(cat <<-EOF
   # include "pad";
   # include "colour";
   def configKeys:
     ["bindkey", "dir", "depth", "glob", "show-hidden", "show-ignore", "xargs"];
   def convertToConfigHash:
     to_entries | map(.key = configKeys[.key]) | from_entries;
   def convertArraysToConfigHash:
     if type == "object" then
        .
     else
       convertToConfigHash
       # .
     end;
  map(convertArraysToConfigHash) | .[]
EOF
)
  # local config=$(yq eval '.keymaps' $configFile --output-format json | jq --compact-output '.[]')
  local config=$(yq eval '.keymaps' $configFile --output-format json | jq --compact-output "$jqQuery")

  # for row in $config; do
  # while read loop splits only on newlines, unlike for do read which splits on any whitespace

  while read row; do
    local bindkey=$(jq --raw-output '.bindkey' <<< $row)
    local dir=$(jq '.dir' <<< $row)
    # https://github.com/stedolan/jq/issues/354#issuecomment-43147898
    # // is the jq alternative operator
    # empty is a jq builtin
    local depth=$(jq '.depth // empty' <<< $row)
    local glob=$(jq '.glob // empty' <<< $row)
    local showHidden=$(jq '.["show-hidden"] // empty' <<< $row)
    local showIgnore=$(jq '.["show-ignore"] // empty' <<< $row)
    local xargs=$(jq '.xargs // empty' <<< $row)

    glob=${glob:+"-g $glob"}
    xargs=${xargs:+"-x $xargs"}
    depth=${depth:+"-l $depth"}
    showHidden=${showHidden:+"-h"}
    showIgnore=${showHidden:+"-i"}

    # NOTE: running eval adds 1s to zsh startup 
    # instead, generate and autoload the functions
    # search both directories and files
    echo "fs$bindkey() {fswitch -d $dir $depth "$glob" $showHidden $showIgnore $xargs}" > $outputFolder/fs$bindkey
    echo "alias o$bindkey=fs$bindkey" >> $aliasFile
    
    # search files only
    echo "fsf$bindkey() {fswitch -d $dir $depth "$glob" $showHidden $showIgnore $xargs -t f}" > $outputFolder/fsf$bindkey
    echo "alias u$bindkey=fsf$bindkey" >> $aliasFile
    
    # search directories only
    echo "fsd$bindkey() {fswitch -d $dir $depth "$glob" $showHidden $showIgnore $xargs -t d}" > $outputFolder/fsd$bindkey
    echo "alias e$bindkey=fsd$bindkey" >> $aliasFile

    # search filename and content
    echo "fsc$bindkey() {fzf-filename-and-content $dir }" > $outputFolder/fsc$bindkey
    echo "alias .$bindkey=fsc$bindkey" >> $aliasFile
    
    # go to base directory
    echo "dd$bindkey() {cd $dir }" > $outputFolder/dd$bindkey
    echo "alias :$bindkey=dd$bindkey" >> $aliasFile
    echo "alias q$bindkey='nvim $dir'" >> $aliasFile

    # open mru file
    echo "fs-mru-open-$bindkey() {cache-open $cache $dir}" > $outputFolder/fs-mru-open-$bindkey
    echo "alias ,$bindkey=fs-mru-open-$bindkey" >> $aliasFile
  done <<< $config
}
